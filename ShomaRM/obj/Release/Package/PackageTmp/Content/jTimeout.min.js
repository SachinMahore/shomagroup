(function ($) {

    $.jTimeout = function (options) {

        if (typeof window.jTimeout !== 'undefined') {
            return window.jTimeout;
        }
        options = $.extend({}, $.jTimeout.defaults, options);
        var timeout =
        {
            timedOut: false,
            timeoutWarning: false,
            interval: false,
            mouseTimeout: false,
            options: options,
            get: function (key) {
                return window.localStorage.getItem(key);
            },
            set: function (key, val) {
                return window.localStorage.setItem(key, val);
            },
            getExpiration: function () {
                return this.get(this.options.expiration_key);
            },
            setExpiration: function (seconds_till_expiration) {
                var d = new Date();
                d.setSeconds(d.getSeconds() + seconds_till_expiration);
                return this.set(this.options.expiration_key, d);
            },
            setTimeOutAfter: function (time_out_after) {
                timeout.stopFlashing();
                return this.set(this.options.timeoutAfter, time_out_after);
            },
            resetExpiration: function () {
                this.setExpiration(this.options.timeoutAfter);
                return this;
            },
            getSecondsTillExpiration: function () {
                var seconds = Math.round(((new Date(this.getExpiration())).getTime() - (new Date()).getTime()) / 1000);
                return seconds <= 0 ? 0 : seconds;
            },
            stopPriorCountdown: function () {
                if (timeout.priorCountDown) {
                    timeout.priorCountDown = false;
                }
            },
            resetOnAlert: function () {
                if (!timeout.options.triggerResetOnAlert) {
                    return $('#jTimeoutAlert').length === 0 && $('#jTimedoutAlert').length === 0;
                }
                return $('#jTimedoutAlert').length === 0 && timeout.options.triggerResetOnAlert;
            },
            stopFlashing: function () {
                if (timeout.options.flashTitle) {
                    if (timeout.flashingTitle) {
                        window.clearInterval(timeout.flashingTitle);
                    }

                    timeout.flashingTitle = false;
                    document.title = timeout.options.originalTitle;
                }
            },
            startFlashing: function () {
                if (!timeout.flashingTitle && timeout.options.flashTitle) {
                    timeout.flashingTitle = window.setInterval(function () {
                        if (document.title === timeout.options.flashingTitleText) {
                            document.title = timeout.options.originalTitle;
                        }
                        else {
                            document.title = timeout.options.flashingTitleText;
                        }
                    }, timeout.options.flashTitleSpeed);
                }
            },
            startPriorCountdown: function (elem) {
                timeout.priorCountDown = elem;
            },
            hideCountdownAlert: function () {
                timeout.timeoutWarning = false;

                var timeoutAlert = $('#jTimeoutAlert');

                if (timeoutAlert.length > 0) {
                    timeoutAlert.closeAlert();
                }
            },
            setMouseTimeout: function (timeout) {
                this.mouseTimeout = timeout;
            },
            stopMouseTimeout: function () {
                if (this.mouseTimeout) {
                    window.clearTimeout(this.mouseTimeout);
                }
            },
            stopActivityMonitoring: function () {
                timeout.stopMouseTimeout();
            },
            startActivityMonitoring: function () {
                timeout.stopActivityMonitoring();
                if (timeout.options.extendOnMouseMove) {
                    inMS = timeout.options.mouseDebounce * 1000;
                    timeout.mouseMoved = false;
                    timeout.setMouseTimeout(window.setTimeout(function () {
                        $('body').on('mousemove.jTimeout', function () {
                            if (!timeout.mouseMoved && timeout.resetOnAlert()) {
                                timeout.mouseMoved = true;
                                timeout.setMouseTimeout(window.setTimeout(function () {
                                    timeout.mouseMoved = false;
                                }, inMS));

                                timeout.options.onMouseMove(timeout);
                            }
                        });

                    }, inMS));
                }
            },
            setCountdown: function (interval) {
                this.interval = interval;
            },
            countdown: function () {
                var expiration = timeout.getExpiration();
                var seconds_till_expires = timeout.getSecondsTillExpiration();
                if (timeout.priorCountDown) {
                    timeout.priorCountDown.text(seconds_till_expires);
                }
                if (seconds_till_expires <= 0 && !timeout.timedOut) {
                    timeout.timeoutWarning = true;
                    timeout.timedOut = true;
                    timeout.options.onTimeout(timeout);
                    timeout.stopActivityMonitoring();
                }
                else if (seconds_till_expires > 0 && timeout.timedOut) {
                    timeout.timeoutWarning = false;
                    timeout.timedOut = false;
                    timeout.options.onSessionExtended(timeout);
                    timeout.startActivityMonitoring();
                }
                else if (seconds_till_expires < timeout.options.secondsPrior && !timeout.timeoutWarning) {
                    timeout.timeoutWarning = true;
                    timeout.startFlashing();
                    timeout.options.onPriorCallback(timeout, seconds_till_expires);

                }
                else if (seconds_till_expires >= timeout.options.secondsPrior && timeout.timeoutWarning) {
                    timeout.stopFlashing();
                    timeout.stopPriorCountdown();
                    timeout.hideCountdownAlert();
                }
            },
            destroy: function () {
                timeout.stopFlashing();
                timeout.stopActivityMonitoring();
                delete timeout.options.onSessionExtended;
                delete timeout.countdown;
                $('body').off('mousemove.jTimeout');
            }
        };
        timeout.resetExpiration();
        var inMS = timeout.options.heartbeat * 1000;
        timeout.setCountdown(window.setInterval(timeout.countdown, inMS));
        timeout.startActivityMonitoring();
        window.jTimeout = timeout;
        return timeout;
    };

    $.jTimeout.reset = function (seconds_till_expiration) {
        var seconds = typeof seconds_till_expiration === 'undefined' ? $.jTimeout.defaults.timeoutAfter : seconds_till_expiration;
        $.jTimeout().setExpiration(seconds);
    };

    $.jTimeout.setTimeOutAfter = function (time_out_after) {
        $.jTimeout().setTimeOutAfter(time_out_after);
        $.jTimeout().resetExpiration();
    };

    $.jTimeout.defaults = {
        expiration_key: 'jtimeout-session-expiration',
        flashTitle: true,
        flashTitleSpeed: 500,
        flashingTitleText: '**WARNING**',
        originalTitle: document.title, 
        timeoutAfter: 780, 
        heartbeat: 1, 
        extendOnMouseMove: true,
        mouseDebounce: 30,
        onMouseMove: function (timeout) {
            $.get(timeout.options.extendUrl, function (data) {
                timeout.resetExpiration();
                timeout.stopFlashing();
            });
        },
        extendUrl: '/account/keeplive', 
        logoutUrl: '/account/logoff',
        loginUrl: '/account/login',
        secondsPrior: 120, 
        triggerResetOnAlert: false,
        onPriorCallback: function (timeout, seconds) {
            $.jAlert({
                'id': 'jTimeoutAlert',
                'title': '**WARNING**',
                'content': '<b>Your session will timeout in <span class="jTimeout_Countdown">' + seconds + '</span> seconds!</b>',
                'theme': 'red',
                'closeBtn': false,
                'onOpen': function (alert) {
                    timeout.startPriorCountdown(alert.find('.jTimeout_Countdown'));
                },
                'btns': [
                    {
                        'text': 'Extend My Session',
                        'theme': 'blue',
                        'onClick': function (e, btn) {
                            e.preventDefault();
                            timeout.options.onClickExtend(timeout);
                            btn.parents('.jAlert').closeAlert();
                            return false;
                        }
                    },
                    {
                        'text': 'Logout Now',
                        'onClick': function (e, btn) {
                            e.preventDefault();
                            window.location.href = timeout.options.logoutUrl;
                            return false;
                        }
                    }
                ]
            });
        },
        onClickExtend: function (timeout) {
            $.get(timeout.options.extendUrl, function (data) {
                timeout.resetExpiration();
                timeout.stopFlashing();
            });
        },
        onTimeout: function (timeout) {
            window.location.href = timeout.options.logoutUrl;
        },
        onSessionExtended: function (timeout) {
            $('#jTimedoutAlert').closeAlert();
            timeout.stopFlashing();
        }
    };
})(jQuery);
